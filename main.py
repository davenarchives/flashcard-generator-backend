from fastapi import FastAPI, UploadFile
from fastapi.middleware.cors import CORSMiddleware
import google.generativeai as genai
from dotenv import load_dotenv
import os
import PyPDF2

# -----------------------------------------------------
# üîê Load API key from .env file (DO NOT hardcode keys)
# -----------------------------------------------------
load_dotenv()
api_key = os.getenv("GEMINI_API_KEY")

if not api_key:
    raise ValueError("‚ùå GEMINI_API_KEY not found. Make sure it's in your .env file.")

# Configure Gemini
genai.configure(api_key=api_key)

# -----------------------------------------------------
# üöÄ Initialize FastAPI app
# -----------------------------------------------------
app = FastAPI(title="AI Flashcard Generator")

# Allow frontend requests from your Next.js app
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000", "https://pdflashgen.vercel.app"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# -----------------------------------------------------
# üìÑ Helper: extract text from uploaded files
# -----------------------------------------------------
def extract_text(file: UploadFile):
    """Extract text from PDF or plain text file."""
    if file.filename.endswith(".pdf"):
        reader = PyPDF2.PdfReader(file.file)
        text = ""
        for page in reader.pages:
            content = page.extract_text()
            if content:
                text += content + "\n"
        return text.strip()
    else:
        return file.file.read().decode("utf-8").strip()

# -----------------------------------------------------
# üè† Root route
# -----------------------------------------------------
@app.get("/")
def home():
    """Simple health check route."""
    return {"message": "‚úÖ AI Flashcard Generator backend is running!"}

# -----------------------------------------------------
# üß† Summarize endpoint
# -----------------------------------------------------
@app.post("/summarize")
async def summarize(file: UploadFile):
    """Generate study flashcards using Gemini."""
    text = extract_text(file)

    if not text:
        return {"error": "No readable text found in uploaded file."}

    model = genai.GenerativeModel(model_name="models/gemini-2.5-flash")

    prompt = f"""
    You are an AI tutor. Convert the following lecture notes into clear and concise
    flashcards. Each flashcard should follow this format exactly:

    Q: <question>
    A: <answer>

    Notes:
    {text}
    """

    try:
        response = model.generate_content(prompt)
        if not response.text:
            return {"error": "No response generated by Gemini."}

        return {"flashcards": response.text.strip()}

    except Exception as e:
        return {"error": str(e)}
